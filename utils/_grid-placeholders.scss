// These are placeholder classes for the grid. They use Susy's mixins to determine width and margins.
// This is the way I have to create a semantic grid, and avoid cluttering the css with repeating rules. Yes, placeholders rule.
// These are only for for layout aware situations. If not given a context, Susy will use the $total-columns.
// There's probably a simpler way to create these with a function, but that's beyond me atm... =P

// grid placeholders:

// sets container to the full grid width, plus $grid-padding on each side 
%container {
  @include box-sizing(content-box); // Suzy uses padding for the grid outer spacing, so this avoids errors in max-width
  @include container();
}

// columns (omega makes the column float contrary to grid flow)
@each $n in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 {
  %span-columns-#{$n} {
    @include span-columns($n);
  }
  %span-columns-#{$n}-omega {
    @include span-columns($n omega);
  }
}